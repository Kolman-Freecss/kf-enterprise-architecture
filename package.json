{
  "name": "intelligent-document-processing",
  "version": "1.0.0",
  "description": "Enterprise-grade Generative AI architecture for document processing and analysis",
  "main": "dist/index.js",
  "scripts": {
    "dev": "tsx watch src/index.ts",
    "build": "tsc && npm run build:client",
    "build:client": "vite build client",
    "start": "node dist/index.js",
    "test": "jest",
    "test:unit": "jest --testPathPattern=tests/unit",
    "test:integration": "jest --testPathPattern=tests/integration",
    "test:e2e": "jest --testPathPattern=tests/e2e",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint src/**/*.ts --fix",
    "typecheck": "tsc --noEmit",
    "setup": "npm run setup:env && npm run setup:db && npm run setup:aws",
    "setup:env": "cp .env.example .env",
    "setup:db": "docker-compose up -d vectordb",
    "setup:aws": "node scripts/setup-aws.js",
    "db:migrate": "node scripts/migrate-db.js",
    "db:seed": "node scripts/seed-db.js",
    "deploy:staging": "npm run build && node scripts/deploy.js staging",
    "deploy:prod": "npm run build && node scripts/deploy.js production",
    "infrastructure:plan": "cd infrastructure/terraform && terraform plan",
    "infrastructure:apply": "cd infrastructure/terraform && terraform apply",
    "infrastructure:destroy": "cd infrastructure/terraform && terraform destroy",
    "audit": "npm audit && node scripts/security-audit.js",
    "docs:generate": "typedoc src --out docs/api",
    "logs:tail": "aws logs tail /aws/lambda/document-processor --follow",
    "monitor:dashboard": "open https://console.aws.amazon.com/cloudwatch/",
    "mcp:start": "node dist/agents/mcp-server.js",
    "agents:test": "node scripts/test-agents.js"
  },
  "keywords": [
    "generative-ai",
    "document-processing",
    "enterprise-architecture",
    "aws-bedrock",
    "mcp",
    "vector-database",
    "rag"
  ],
  "author": "Enterprise AI Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "dependencies": {
    "@aws-sdk/client-bedrock": "^3.450.0",
    "@aws-sdk/client-bedrock-runtime": "^3.450.0",
    "@aws-sdk/client-s3": "^3.450.0",
    "@aws-sdk/client-sagemaker": "^3.450.0",
    "@aws-sdk/client-lambda": "^3.450.0",
    "@aws-sdk/client-cloudwatch": "^3.450.0",
    "@pinecone-database/pinecone": "^1.1.2",
    "chromadb": "^1.7.3",
    "langchain": "^0.0.208",
    "@langchain/aws": "^0.0.8",
    "@langchain/community": "^0.0.47",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "helmet": "^7.1.0",
    "cors": "^2.8.5",
    "multer": "^1.4.5-lts.1",
    "pdf-parse": "^1.1.1",
    "mammoth": "^1.6.0",
    "sharp": "^0.32.6",
    "tesseract.js": "^4.1.4",
    "node-nlp": "^4.27.0",
    "compromise": "^14.10.0",
    "zod": "^3.22.4",
    "winston": "^3.11.0",
    "ioredis": "^5.3.2",
    "bull": "^4.12.2",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "dotenv": "^16.3.1",
    "uuid": "^9.0.1",
    "lodash": "^4.17.21",
    "moment": "^2.29.4",
    "axios": "^1.6.2",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "@types/node": "^20.10.5",
    "@types/express": "^4.17.21",
    "@types/multer": "^1.4.11",
    "@types/cors": "^2.8.17",
    "@types/uuid": "^9.0.7",
    "@types/lodash": "^4.14.202",
    "@types/ws": "^8.5.10",
    "@types/jest": "^29.5.8",
    "typescript": "^5.3.3",
    "tsx": "^4.6.2",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "eslint": "^8.56.0",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "prettier": "^3.1.1",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0",
    "vite": "^5.0.7",
    "@vitejs/plugin-react": "^4.2.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "typedoc": "^0.25.4",
    "supertest": "^6.3.3",
    "@types/supertest": "^2.0.16"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": ["<rootDir>/src", "<rootDir>/tests"],
    "testMatch": ["**/tests/**/*.test.ts"],
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts",
      "!src/index.ts"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": 80
      }
    }
  }
}